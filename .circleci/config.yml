version: 2.1
orbs:
  slack: circleci/slack@3.4.2

executors:
  docker-executor:
    docker:
      - image: 218546966473.dkr.ecr.us-east-1.amazonaws.com/circle-ci:stitch-tap-tester

jobs:
  build:
    executor: docker-executor
    steps:
      - run: echo "CI Done"

  ensure_env:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: 'Setup virtual env'
          command: |
            python3 -mvenv /usr/local/share/virtualenvs/tap-ga4
            source /usr/local/share/virtualenvs/tap-ga4/bin/activate
            pip install 'pip==21.1.3'
            pip install 'setuptools==60.8.2'
            pip install .[dev]
            aws s3 cp s3://com-stitchdata-dev-deployment-assets/environments/tap-tester/tap_tester_sandbox /usr/local/share/virtualenvs/dev_env.sh
      - slack/notify-on-failure:
          only_for_branches: main
      - persist_to_workspace:
          root: /usr/local/share/virtualenvs
          paths:
            - tap-ga4
            - dev_env.sh

  run_pylint:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: /usr/local/share/virtualenvs
      - run:
          name: 'pylint'
          command: |
            source /usr/local/share/virtualenvs/tap-ga4/bin/activate
            # TODO: Adjust the pylint disables
            pylint tap_ga4 --disable 'broad-except,broad-exception-caught,broad-exception-raised,chained-comparison,empty-docstring,fixme,invalid-name,line-too-long,missing-class-docstring,missing-function-docstring,missing-module-docstring,no-else-raise,no-else-return,too-few-public-methods,too-many-arguments,too-many-branches,too-many-lines,too-many-locals,ungrouped-imports,wrong-spelling-in-comment,wrong-spelling-in-docstring,missing-class-docstring'
      - slack/notify-on-failure:
          only_for_branches: main

  run_unit_tests:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: /usr/local/share/virtualenvs
      - run:
          name: 'Unit Tests'
          command: |
            source /usr/local/share/virtualenvs/tap-ga4/bin/activate
            source /usr/local/share/virtualenvs/dev_env.sh
            pip install nose coverage
            nosetests --with-coverage --cover-erase --cover-package=tap_ga4 --cover-html-dir=htmlcov tests/unittests
            coverage html
      - store_test_results:
          path: test_output/report.xml
      - store_artifacts:
          path: htmlcov
      - run:
          name: 'JSON Validator'
          command: |
            source /usr/local/share/virtualenvs/tap-tester/bin/activate
            stitch-validate-json tap_ga4/*.json

  run_integration_tests:
    executor: docker-executor
    parallelism: 5
    steps:
      - checkout
      - attach_workspace:
          at: /usr/local/share/virtualenvs
      - run:
          name: 'Run Integration Tests'
          no_output_timeout: 70m
          command: |
            source /usr/local/share/virtualenvs/dev_env.sh
            mkdir /tmp/${CIRCLE_PROJECT_REPONAME}
            export STITCH_CONFIG_DIR=/tmp/${CIRCLE_PROJECT_REPONAME}
            source /usr/local/share/virtualenvs/tap-tester/bin/activate
            circleci tests glob "tests/test_*.py" | circleci tests split > ./tests-to-run
            if [ -s ./tests-to-run ]; then
              for test_file in $(cat ./tests-to-run)
              do
                echo $test_file > $STITCH_CONFIG_DIR/tap_test.txt
                run-test --tap=${CIRCLE_PROJECT_REPONAME} $test_file
              done
            fi
      - slack/notify-on-failure:
          only_for_branches: main
      - store_artifacts:
          path: /tmp/tap-ga4

  run_field_exclusions_test:
    executor: docker-executor
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "cf:fb:a9:64:e1:34:ee:2b:74:9c:88:b0:bf:f8:0f:99"
      - attach_workspace:
          at: /usr/local/share/virtualenvs
      - run:
          name: 'Run Field Exclusion Test'
          no_output_timeout: 70m
          command: |
            source /usr/local/share/virtualenvs/tap-ga4/bin/activate
            source /usr/local/share/virtualenvs/dev_env.sh
            pip install nose
            nosetests tests/field_exclusions
      - run:
          name: 'Commit changes to git'
          when: on_fail
          command: |
            echo "Committing to GitHub"

            # Setup
            git config user.email "stitchintegrationdev@talend.com"
            git config user.name "CircleCI Job"

            wget https://github.com/cli/cli/releases/download/v2.23.0/gh_2.23.0_linux_amd64.tar.gz
            tar xf gh_2.23.0_linux_amd64.tar.gz
            cp /root/project/gh_2.23.0_linux_amd64/bin/gh /usr/local/bin/

            apt install -y gawk

            bash < <(curl -s https://raw.githubusercontent.com/babashka/babashka/master/install)
            # End Setup

            CLJ_SCRIPT='
            (-> (mapv clojure.string/trim *input*)
                sort
                last
                (clojure.string/split (re-pattern "remotes/origin/"))
                last
                println)
            '
            # Decide if we need to checkout a new branch
            branch_name=''
            if ! git branch -a | grep 'remotes/origin/update-field-selection.*' > /dev/null ;
            then
                echo 'No remote branches found that look like `update-field-selection*`'
                branch_name="update-field-selection-$(date -I)"
                git checkout main
                git checkout -b "$branch_name"
            else
                echo 'Found remote branches'
                branch_name=$(git branch -a | grep 'remotes/origin/update-field-selection.*' | bb -i -e "$CLJ_SCRIPT")
                git checkout "$branch_name"
            fi

            mv /root/project/tap_ga4/new_field_exclusions.json /root/project/tap_ga4/field_exclusions.json

            if git diff --quiet tap_ga4/field_exclusions.json;
            then
                echo 'No diff'
            else
                # Commit 1: Schema changes
                git commit -am "Update field exclusions"
                git push -u origin "$branch_name"
            fi

            if [[ "Update field selection" == $(gh pr list --author "singer-bot" --json title --jq '.[].title') ]] ;
            then
                existing_pr_url=$(gh pr list --author "singer-bot" --json url --jq '.[].url')
                echo "Found existing PR at $existing_pr_url, not opening another PR"
            else
                gh pr create --title "Update field selection" --body "Update cached field exclusions to match changes made in the GA4 Data API" -B main
                # Commit 2: packaging stuff

                OLD_VERSION=$(python setup.py --version)
                NEW_VERSION="$(python setup.py --version | gawk -F. '/[0-9]+/{$NF++;print}' OFS=.)"
                PR_NUMBER=$(gh pr list -L 1 --json number -q .[].number)
                sed -i 's/'"$OLD_VERSION"'/'"$NEW_VERSION"'/g' /root/project/setup.py
                sed -i '1 a\## v'"$NEW_VERSION"'\n  * Update cached field exclusions to match changes made in the GA4 Data API [#'"$PR_NUMBER"'](https://github.com/singer-io/tap-ga4/pull/'"$PR_NUMBER"')' CHANGELOG.md
                git commit -am "Bump version, Update changelog [skip-ci]"
                git push
            fi
      - slack/notify-on-failure:
          only_for_branches: main
      - store_artifacts:
          path: /tmp/tap-ga4

workflows:
  version: 2
  commit: &commit_jobs
    jobs:
      - ensure_env:
          context:
            - circleci-user
            - tier-1-tap-user
      - run_pylint:
          context:
            - circleci-user
            - tier-1-tap-user
          requires:
            - ensure_env
      - run_unit_tests:
          context:
            - circleci-user
            - tier-1-tap-user
          requires:
            - ensure_env
      - run_integration_tests:
          context:
            - circleci-user
            - tier-1-tap-user
          requires:
            - ensure_env
      - build:
          context:
            - circleci-user
            - tier-1-tap-user
          requires:
            - run_pylint
            - run_unit_tests
            - run_integration_tests
  build_daily:
    jobs:
      - ensure_env:
          context:
            - circleci-user
            - tier-1-tap-user
      - run_pylint:
          context:
            - circleci-user
            - tier-1-tap-user
          requires:
            - ensure_env
      - run_unit_tests:
          context:
            - circleci-user
            - tier-1-tap-user
          requires:
            - ensure_env
      - run_integration_tests:
          context:
            - circleci-user
            - tier-1-tap-user
          requires:
            - ensure_env
            - run_field_exclusions_test
      - run_field_exclusions_test:
          context:
            - circleci-user
            - tier-1-tap-user
            - singer-bot-github-token
          requires:
            - run_pylint
            - run_unit_tests
      - build:
          context:
            - circleci-user
            - tier-1-tap-user
          requires:
            - run_pylint
            - run_unit_tests
            - run_integration_tests
            - run_field_exclusions_test
    triggers:
      - schedule:
          cron: "0 3 * * *"
          filters:
            branches:
              only:
                - main
